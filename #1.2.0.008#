;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

(require threading)
(defun factorail (n)
  (~> (range 1 (+ n 1))
      (fold &1_)))
(factorial 5)


(require threading)
(require algorithms)


(defun exp (b n )
  (~> (repeat n b)
      (fold * 1_)))
   
 (exp 4 5)
 
(defun  expt (b n)

      (expt-iter b n 1))

      (defun expt-iter (b counter product)
           (if (= counter 0)
                  product
              (expt-iter b  (- counter 1) (* b product))))
                    (expt-iter 1 4 5)


;; basic exponential function

(defun expt (b n)
    (if (= n 0)
        1
    (* b (expt b (- n 1)))))
 (expt 4 5)
 ;; iteration

;; from Fctorials
;; simple sicp factorial example


(defun fact (n)
   (if (= n 0)
       1
     (* n (fact (- n 1)))))
 (fact 5)


;; using iteration


(defun  factorial (n)
(fact-iter 1 1 n)
(defun fact-iter (product counter max-count)
(if (> counter max-count)
product
(fact-iter (* counter product)
(+ counter 1)
max-count)))
(fact-iter 1 1 4)


(defun expt (b n)
(if (= n 0)
1
(* b (expt b (- n 1)))))

(expt 3 2)

(defun  expt (b n)
(expt-iter b n 1))
(defun expt-iter (b counter product)
(if (= counter 0)
product
(expt-iter b(- counter 1)(* b product))))

(expt-iter 3 2 1)
   
(expt 4 5)

(defun fn(b n)
   (cond ((=n 0) 1)
         ((even