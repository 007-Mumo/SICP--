Current directory is /home/mumo/
GNU Guile 3.0.7
Copyright (C) 1995-2021 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
scheme@(guile-user)> ;;newtonian method 
scheme@(guile-user)> ;; newtonian method of finding square roots
scheme@(guile-user)> (define (average x y)
(/ (+ x y) 2))
scheme@(guile-user)> (define (improve x y)
(average x (/ x y)))
scheme@(guile-user)> (defien (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))  <tool-bar> <stop>While reading expression:
User interrupt
scheme@(guile-user)> (define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))
;;; <stdin>:9:12: warning: possibly unbound variable `square'
scheme@(guile-user)> (define (square x) (* x x))
scheme@(guile-user)> (define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))
scheme@(guile-user)> (define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
While compiling expression:
Syntax error:
unknown location: source expression failed to match any pattern in form (if (good-enough? guess x) gurss ess (sqrt-iter (improve guess x) x))
scheme@(guile-user)> (define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
scheme@(guile-user)> (define (sqrt x)
(sqrt-iter 1.0 x))
;;; <stdin>:22:1: warning: possibly unbound variable `defien'
;;; <stdin>:23:0: warning: possibly unbound variable `ne'
;;; <stdin>:23:9: warning: possibly unbound variable `x'
ice-9/boot-9.scm:1685:16: In procedure raise-exception:
Unbound variable: defien

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [1]> (define (sqrt x)
(sqrt-iter 1.0 x))
scheme@(guile-user) [1]> (sqrt 9)
  <tool-bar> <stop>ice-9/boot-9.scm:1685:16: In procedure raise-exception:
User interrupt

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [2]  <tool-bar> <stop>ice-9/boot-9.scm:1685:16: In procedure raise-exception:
User interrupt

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [3]> (define (my-sqrt x)
(define (sqrt-iter guess x)
(define (var1 guess x)
(/ guess x)
(define (var 2)
(average var1 x)  <tool-bar> <stop>
While reading expression:
User interrupt
scheme@(guile-user) [3]>
scheme@(guile-user) [3]> (define (average x y) (/ (+ x y) 2))
scheme@(guile-user) [3]> (define (quotient x y) (/ x y))
scheme@(guile-user) [3]> (define (tolerance x y) (< (abs (- (square x) y)) 0.001))
scheme@(guile-user) [3]> (define (my-sqrt x)
(define (sqrt-iter guess x)
(quotient guess x)
(average quotient guess)
(if (tolerance average x)
average
(sqrt-iter (average quotient guess) x)
(sqrt-iter 1.0 x))))
While compiling expression:
Syntax error:
unknown file:39:0: body should end with an expression in form (lambda (x) (define (sqrt-iter guess x) (quotient guess x) (average quotient guess) (if (tolerance average x) average (sqrt-iter (average quotient guess) x) (sqrt-iter 1.0 x))))
scheme@(guile-user) [3]> (define (improve guess x)
(average guess (/ x guess)))
scheme@(guile-user) [3]> (define (average x y)
(/ (+ x y) 2))
scheme@(guile-user) [3]> (define (improve guess x)
(average guess (/ x guess)))
scheme@(guile-user) [3]> (define (good-enough? guess x)
(< (abs (- (square guess) x)) 0.001))
scheme@(guile-user) [3]> (define (sqrt-iter guess x)
(if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
scheme@(guile-user) [3]> (define (sqrt x)
(sqrt-iter 1.0 x))
scheme@(guile-user) [3]> (sqrt 9)
$1 = 3.00009155413138
scheme@(guile-user) [3]>(define square x) (* x x)
While compiling expression:
Syntax error:
unknown file:62:0: unexpected syntax in form define
$2 = #<procedure square (x)>
;;; <stdin>:62:14: warning: possibly unbound variable `x'
ice-9/boot-9.scm:1685:16: In procedure raise-exception:
Unbound variable: x

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
While reading expression:
#<unknown port>:62:17: unexpected ")"
scheme@(guile-user) [4]> (define (square x) (* x x))
scheme@(guile-user) [4]>  (define (average x y) (/ (+ x y) 2))
scheme@(guile-user) [4]>  (define (quotient x y) (/ x y))
scheme@(guile-user) [4]> (define (tolerance x y) (< (abs (- (square x) y)) 0.001))
scheme@(guile-user) [4]> (define (sqrt-iter guess x)
(if (tolerance  guess x)
guess
(sqrt-iter (avreage guess (quotient x guess)))))
;;; <stdin>:70:0: warning: wrong number of arguments to `sqrt-iter'
;;; <stdin>:70:12: warning: possibly unbound variable `avreage'
scheme@(guile-user) [4]> (define (sqrt-iter guess x)
(if (tolerance  guess x)
guess
(sqrt-iter (average guess (quotient x guess)))))
;;; <stdin>:74:0: warning: wrong number of arguments to `sqrt-iter'
scheme@(guile-user) [4]> (define (sqrt-iter guess x)
(if (tolerance  guess x)
guess
(sqrt-iter (average guess (quotient x guess)) x )))
scheme@(guile-user) [4]>  (define (sqrt x)
(sqrt-iter 1.0 x))
scheme@(guile-user) [4]> (sqrt 9)
$3 = 3.00009155413138
scheme@(guile-user) [4  <tool-bar> <stop>While reading expression:
User interrupt
scheme@(guile-user) [4]> (define (sqrt-iter guess x)
(new-if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
;;; <stdin>:83:1: warning: possibly unbound variable `new-if'
scheme@(guile-user) [4]> (define (sqrt-iter guess x)
(new-if (good-enough? guess x)
guess
(sqrt-iter (improve guess x) x)))
;;; <stdin>:87:1: warning: possibly unbound variable `new-if'
scheme@(guile-user) [4]> (define (cube x) (* x x x))
scheme@(guile-user) [4]> (define (cube-step x y) ( / + ( / x (square y)) (* 2 y) 3))
While reading expression:
#<unknown port>:92:3: unexpected ")"
scheme@(guile-user) [4]> (define (cube-step x y) ( / + ( / x (square y)) (* 2 y) 3))
scheme@(guile-user) [4]>(define (quotient x y) (/ x y))
scheme@(guile-user) [4]> (define (tolerance x y) (< (abs (- (square x) y)) 0.001))
scheme@(guile-user) [4]>  (define (tolerance x y) (< (abs (- (cube   x) y)) 0.001))
scheme@(guile-user) [4]> (define (cuberqt-iter guess x)
(if (tolerance  guess x)
guess
(cuberqt-iter (average guess (quotient x guess)) x )))
scheme@(guile-user) [4]>   (define (cuberqt x)
(cuberqt-iter 1.0 x))
scheme@(guile-user) [4]> (cuberqt 27)
  <tool-bar> <stop>ice-9/boot-9.scm:1685:16: In procedure raise-exception:
User interrupt

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [5]> (define (cube x) (* x x x)  <tool-bar> <stop>While reading expression:
User interrupt
scheme@(guile-user) [5]> (define (cube x) (* x x x))
scheme@(guile-user) [5]> (define (average x y) (/ (+ x y) 2))
scheme@(guile-user) [5]> (define (quotient x y) (/ x y))
scheme@(guile-user) [5]> (define (tolerance x y) (< (abs (- (cube   x) y)) 0.001))
scheme@(guile-user) [5]> (define (step x y) ( / (+ ( / x (square y)) (* 2 y)) 3))
scheme@(guile-user) [5]>(define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(step  (average guess (quotient x guess)) x)))
scheme@(guile-user) [5]> (define (cqrt x)
(cqrt-iter 1.0 x))
scheme@(guile-user) [5]>(cqrt 27)
$4 = 18.006401463191587
scheme@(guile-user) [5]>(define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(cqrt (step guess (quotient x guess)) x)))
;;; <stdin>:121:0: warning: possibly wrong number of arguments to `cqrt'
scheme@(guile-user) [5]> (define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(cqrt-iter (step guess (quotient x guess)) x)))
scheme@(guile-user) [5]> (define (cqrt x)
(cqrt-iter 1.0 x))
scheme@(guile-user) [5]>  (define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(cqrt-iter (step guess (quotient x guess)) x)))
  <tool-bar> <stop>ice-9/boot-9.scm:1685:16: In procedure raise-exception:
User interrupt

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [6]>  (define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(cqrt-iter (step guess (quotient x guess)) x)))
scheme@(guile-user) [6]> (define (cqrt x)
(cqrt-iter 1.0 x))
$4 = 18.006401463191587  <tool-bar> <stop>ice-9/boot-9.scm:1685:16: In procedure raise-exception:
User interrupt

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
scheme@(guile-user) [7]> (define (cube x) (* x x x))
scheme@(guile-user) [7]> (define (average x y) (/ (+ x y) 2))
scheme@(guile-user) [7]> (define (quotient x y) (/ x y))
scheme@(guile-user) [7]> (define (tolerance x y) (< (abs (- (cube   x) y)) 0.001))
scheme@(guile-user) [7]> (define (step x y) ( / (+ ( / x (square y)) (* 2 y)) 3))
scheme@(guile-user) [7]> (define (cqrt-iter guess x)
(if (tolerance  guess x)
guess
(cqrt-iter   (step guess (quotient x guess)) x)))
scheme@(guile-user) [7]> (define (cqrt x)
(cqrt-iter 1.0 x))
scheme@(guile-user) [7]> (cqrt 27)
(define (tolerance x y) (< (abs (- (cube   x) y)) 0.001))
